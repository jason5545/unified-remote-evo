package com.unifiedremote.evo.ui.components

import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import com.unifiedremote.evo.network.UnifiedConnectionState
import com.unifiedremote.evo.network.ble.BleConnectionState
import kotlinx.coroutines.delay

/**
 * ÈÄ£Á∑öÁãÄÊÖãÊåáÁ§∫Âô®Ôºà‰∏çÂπ≤ÊìæÁöÑÊµÆÂãïÊèêÁ§∫Ôºâ
 *
 * ÁâπÊÄßÔºö
 * - Â∞èÂûãÂçäÈÄèÊòéÊèêÁ§∫Ôºå‰ΩçÊñºËû¢ÂπïÈ†ÇÈÉ®
 * - ÈÄ£Á∑öÊàêÂäüÂæå 3 ÁßíËá™ÂãïÈö±Ëóè
 * - ÈáçÈÄ£ÊôÇÊåÅÁ∫åÈ°ØÁ§∫
 * - ‰∏çÂπ≤ÊìæËß∏ÊéßÊùøÊìç‰Ωú
 *
 * @param tcpState TCP ÈÄ£Á∑öÁãÄÊÖãÔºàUnified Remote TCP Ê®°ÂºèÔºâ
 * @param bluetoothState ËóçÁâôÈÄ£Á∑öÁãÄÊÖãÔºàUnified Remote ËóçÁâôÊ®°ÂºèÔºâ
 * @param bleState BLE ÈÄ£Á∑öÁãÄÊÖãÔºàEmulStick BLE Ê®°ÂºèÔºâ
 * @param modifier Modifier
 */
@Composable
fun ConnectionStatusIndicator(
    tcpState: UnifiedConnectionState? = null,
    bluetoothState: UnifiedConnectionState? = null,
    bleState: BleConnectionState? = null,
    modifier: Modifier = Modifier
) {
    // Âè™È°ØÁ§∫ÈåØË™§ÁãÄÊÖãÔºåÈÄ£Á∑öÊàêÂäüÂÆåÂÖ®‰∏çÈ°ØÁ§∫ÔºàÂåÖÊã¨È¶ñÊ¨°ÂíåÈáçÈÄ£ÂæåÔºâ
    val displayState = when {
        tcpState is UnifiedConnectionState.Error ->
            StatusInfo.fromTcpState(tcpState)
        bluetoothState is UnifiedConnectionState.Error ->
            StatusInfo.fromBluetoothState(bluetoothState)
        bleState is BleConnectionState.Error ->
            StatusInfo.fromBleState(bleState)
        else -> null
    }

    // ÊéßÂà∂ÂèØË¶ãÊÄßÔºàÂè™ÊúâÈåØË™§ÁãÄÊÖãÔºåÊåÅÁ∫åÈ°ØÁ§∫Áõ¥Âà∞ÁãÄÊÖãÊîπËÆäÔºâ
    val isVisible = displayState != null

    AnimatedVisibility(
        visible = isVisible && displayState != null,
        enter = slideInVertically(
            initialOffsetY = { -it },
            animationSpec = tween(300, easing = EaseOut)
        ) + fadeIn(animationSpec = tween(300)),
        exit = slideOutVertically(
            targetOffsetY = { -it },
            animationSpec = tween(300, easing = EaseIn)
        ) + fadeOut(animationSpec = tween(300)),
        modifier = modifier
    ) {
        displayState?.let { info ->
            ConnectionStatusBadge(
                icon = info.icon,
                text = info.text,
                backgroundColor = info.backgroundColor,
                isAnimating = info.isAnimating
            )
        }
    }
}

/**
 * ÈÄ£Á∑öÁãÄÊÖãÂæΩÁ´†ÔºàÂØ¶Èöõ UI ÂÖÉ‰ª∂Ôºâ
 */
@Composable
private fun ConnectionStatusBadge(
    icon: String,
    text: String,
    backgroundColor: Color,
    isAnimating: Boolean = false,
    modifier: Modifier = Modifier
) {
    // ÂãïÁï´ÈÄèÊòéÂ∫¶ÔºàÁî®ÊñºÈáçÈÄ£ÁãÄÊÖãÁöÑÂëºÂê∏ÊïàÊûúÔºâ
    val alpha by rememberInfiniteTransition(label = "alphaAnimation").animateFloat(
        initialValue = 0.7f,
        targetValue = 1f,
        animationSpec = infiniteRepeatable(
            animation = tween(1000, easing = LinearEasing),
            repeatMode = RepeatMode.Reverse
        ),
        label = "alpha"
    )

    Box(
        modifier = modifier
            .fillMaxWidth()
            .background(
                backgroundColor.copy(
                    alpha = if (isAnimating) alpha else 0.9f
                )
            )
            .padding(horizontal = 16.dp, vertical = 8.dp),
        contentAlignment = Alignment.Center
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text(
                text = icon,
                style = MaterialTheme.typography.bodyMedium
            )
            Text(
                text = text,
                style = MaterialTheme.typography.bodySmall,
                color = Color.White
            )
        }
    }
}

/**
 * ÁãÄÊÖãË≥áË®äË≥áÊñôÈ°ûÂà•
 */
private data class StatusInfo(
    val icon: String,
    val text: String,
    val backgroundColor: Color,
    val isConnected: Boolean = false,
    val isAnimating: Boolean = false
) {
    companion object {
        fun fromTcpState(state: UnifiedConnectionState): StatusInfo {
            return when (state) {
                is UnifiedConnectionState.Connecting -> StatusInfo(
                    icon = "üîå",
                    text = state.message,
                    backgroundColor = Color(0xFF2196F3),
                    isAnimating = true
                )
                is UnifiedConnectionState.Connected -> StatusInfo(
                    icon = "‚úÖ",
                    text = "Â∑≤ÈÄ£Á∑öÔºö${state.deviceInfo}",
                    backgroundColor = Color(0xFF4CAF50),
                    isConnected = true
                )
                is UnifiedConnectionState.Reconnecting -> StatusInfo(
                    icon = "üîÑ",
                    text = "ÈáçÈÄ£‰∏≠Ôºà${state.attempt}/${state.maxAttempts}Ôºâ...",
                    backgroundColor = Color(0xFFFF9800),
                    isAnimating = true
                )
                is UnifiedConnectionState.Error -> StatusInfo(
                    icon = "‚ùå",
                    text = state.message,
                    backgroundColor = Color(0xFFF44336)
                )
                is UnifiedConnectionState.Disconnected -> StatusInfo(
                    icon = "‚ö†Ô∏è",
                    text = "Â∑≤Êñ∑Á∑ö",
                    backgroundColor = Color(0xFF9E9E9E)
                )
            }
        }

        fun fromBluetoothState(state: UnifiedConnectionState): StatusInfo {
            return when (state) {
                is UnifiedConnectionState.Connecting -> StatusInfo(
                    icon = "üì°",
                    text = "${state.message} (ËóçÁâô)",
                    backgroundColor = Color(0xFF2196F3),
                    isAnimating = true
                )
                is UnifiedConnectionState.Connected -> StatusInfo(
                    icon = "‚úÖ",
                    text = "Â∑≤ÈÄ£Á∑öÔºö${state.deviceInfo} (ËóçÁâô)",
                    backgroundColor = Color(0xFF4CAF50),
                    isConnected = true
                )
                is UnifiedConnectionState.Reconnecting -> StatusInfo(
                    icon = "üîÑ",
                    text = "ËóçÁâôÈáçÈÄ£‰∏≠Ôºà${state.attempt}/${state.maxAttempts}Ôºâ...",
                    backgroundColor = Color(0xFFFF9800),
                    isAnimating = true
                )
                is UnifiedConnectionState.Error -> StatusInfo(
                    icon = "‚ùå",
                    text = "ËóçÁâôÔºö${state.message}",
                    backgroundColor = Color(0xFFF44336)
                )
                is UnifiedConnectionState.Disconnected -> StatusInfo(
                    icon = "‚ö†Ô∏è",
                    text = "ËóçÁâôÂ∑≤Êñ∑Á∑ö",
                    backgroundColor = Color(0xFF9E9E9E)
                )
            }
        }

        fun fromBleState(state: BleConnectionState): StatusInfo {
            return when (state) {
                is BleConnectionState.Scanning -> StatusInfo(
                    icon = "üîç",
                    text = "ÊéÉÊèè‰∏≠...",
                    backgroundColor = Color(0xFF2196F3),
                    isAnimating = true
                )
                is BleConnectionState.Connecting -> StatusInfo(
                    icon = "üì°",
                    text = "Ê≠£Âú®ÈÄ£Á∑öÂà∞ ${state.deviceName}...",
                    backgroundColor = Color(0xFF2196F3),
                    isAnimating = true
                )
                is BleConnectionState.Connected -> StatusInfo(
                    icon = "‚úÖ",
                    text = "Â∑≤ÈÄ£Á∑öÔºö${state.deviceName}",
                    backgroundColor = Color(0xFF4CAF50),
                    isConnected = true
                )
                is BleConnectionState.Reconnecting -> StatusInfo(
                    icon = "üîÑ",
                    text = "BLE ÈáçÈÄ£‰∏≠Ôºà${state.attempt}/${state.maxAttempts}Ôºâ...",
                    backgroundColor = Color(0xFFFF9800),
                    isAnimating = true
                )
                is BleConnectionState.Error -> StatusInfo(
                    icon = "‚ùå",
                    text = "BLEÔºö${state.message}",
                    backgroundColor = Color(0xFFF44336)
                )
                is BleConnectionState.Disconnected -> StatusInfo(
                    icon = "‚ö†Ô∏è",
                    text = "BLE Â∑≤Êñ∑Á∑ö",
                    backgroundColor = Color(0xFF9E9E9E)
                )
            }
        }
    }
}
