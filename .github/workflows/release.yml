name: Build and Release APK

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # 當推送 v1.0.0 等 tag 時觸發
  workflow_dispatch:  # 允許手動觸發

jobs:
  build:
    name: Build Signed APK
    runs-on: ubuntu-latest

    steps:
      # 1. 檢出程式碼
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 設定 JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. 賦予 Gradle 執行權限
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. 設定 Gradle（自動快取）
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-cleanup: true

      # 4.5. 建立 gradle.properties（編譯最佳化）
      - name: Create gradle.properties
        run: |
          cat > gradle.properties <<EOF
          org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError
          org.gradle.parallel=true
          org.gradle.caching=true
          org.gradle.daemon=true
          org.gradle.configureondemand=true
          kotlin.incremental=true
          kotlin.compiler.execution.strategy=in-process
          android.useAndroidX=true
          EOF

      # 5. 設定簽署金鑰環境變數（統一處理）
      - name: Setup Signing Environment
        run: |
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "⚠️ 未找到 KEYSTORE_BASE64，自動產生新的簽署金鑰..."

            # 產生隨機密碼（16 字元）
            STORE_PASS=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
            KEY_PASS=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
            ALIAS="unified-remote-evo"

            echo "產生的資訊（請複製到 GitHub Secrets）："
            echo "=================================="
            echo "KEY_ALIAS=$ALIAS"
            echo "KEYSTORE_PASSWORD=$STORE_PASS"
            echo "KEY_PASSWORD=$KEY_PASS"
            echo "=================================="

            # 產生 Keystore (使用 JKS 格式支援不同密碼)
            keytool -genkey -v \
              -keystore app/release.keystore \
              -storetype JKS \
              -alias "$ALIAS" \
              -keyalg RSA \
              -keysize 2048 \
              -validity 10000 \
              -storepass "$STORE_PASS" \
              -keypass "$KEY_PASS" \
              -dname "CN=Unified Remote Evo, OU=Development, O=Personal, L=Taipei, ST=Taiwan, C=TW"

            # 轉換為 Base64
            KEYSTORE_B64=$(base64 -w 0 app/release.keystore)

            echo ""
            echo "KEYSTORE_BASE64（請複製以下完整內容）："
            echo "=================================="
            echo "$KEYSTORE_B64"
            echo "=================================="
            echo ""
            echo "⚠️ 請將以上 4 個值設定到 GitHub Secrets 中！"
            echo "設定路徑：Settings → Secrets and variables → Actions → New repository secret"

            # 儲存到環境變數
            echo "KEYSTORE_PASSWORD=$STORE_PASS" >> $GITHUB_ENV
            echo "KEY_ALIAS=$ALIAS" >> $GITHUB_ENV
            echo "KEY_PASSWORD=$KEY_PASS" >> $GITHUB_ENV
          else
            echo "✅ 找到現有的簽署金鑰，使用現有設定"
            # 還原 Keystore
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/release.keystore

            # 統一儲存到環境變數（後續步驟只需讀取 env）
            echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
            echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
            echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
          fi

      # 6. 驗證 Keystore 有效性（簡化版本）
      - name: Verify Keystore
        run: |
          echo "🔍 快速驗證 Keystore..."

          # 只做一次快速驗證（減少時間）
          if ! keytool -list -keystore app/release.keystore \
               -storepass "${{ env.KEYSTORE_PASSWORD }}" \
               -alias "${{ env.KEY_ALIAS }}" > /dev/null 2>&1; then
            echo "❌ Keystore 驗證失敗！請檢查 GitHub Secrets 設定"
            exit 1
          fi

          echo "✅ Keystore 驗證通過！"

      # 7. 建立 keystore.properties
      - name: Create keystore.properties
        run: |
          # 直接使用環境變數（無需再判斷來源）
          cat > keystore.properties <<EOF
          storeFile=release.keystore
          storePassword=${{ env.KEYSTORE_PASSWORD }}
          keyAlias=${{ env.KEY_ALIAS }}
          keyPassword=${{ env.KEY_PASSWORD }}
          EOF

      # 8. 編譯 Release APK（顯示編譯時間）
      - name: Build Release APK
        run: |
          echo "🚀 開始編譯..."
          START_TIME=$(date +%s)

          ./gradlew assembleRelease --console=plain --no-daemon --stacktrace

          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo ""
          echo "✅ 編譯完成！耗時: ${DURATION} 秒"

      # 9. 取得版本號（從 tag）
      - name: Get version
        id: version
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          fi

      # 10. 重新命名 APK
      - name: Rename APK
        run: |
          mv app/build/outputs/apk/release/app-release.apk \
             unified-remote-evo-${{ steps.version.outputs.version }}.apk

      # 11. 上傳 APK 作為 Artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: unified-remote-evo-${{ steps.version.outputs.version }}
          path: unified-remote-evo-${{ steps.version.outputs.version }}.apk

      # 12. 建立 GitHub Release（僅當推送 tag 時）
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: unified-remote-evo-${{ steps.version.outputs.version }}.apk
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 13. 清理簽署金鑰
      - name: Cleanup
        if: always()
        run: |
          rm -f app/release.keystore
          rm -f keystore.properties
